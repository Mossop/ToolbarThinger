<?xml version="1.0"?>

 <!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Firefox Toolbar Thinger.
   -
   - The Initial Developer of the Original Code is
   -     Dave Townsend <dave.townsend@blueprintit.co.uk>.
   - Portions created by the Initial Developer are Copyright (C) 2006
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK *****
   -
   - $HeadURL$
   - $LastChangedBy$
   - $Date$
   - $Revision$
   -->

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="bookmark" extends="chrome://thinger/content/bindings/thing.xml#button-thing">
    <content>
      <xul:toolbarbutton context="placesContext" label="New Bookmark Thinger" class="menuitem-iconic bookmark-item">
        <children/>
      </xul:toolbarbutton>
    </content>

    <implementation>
      <field name="_bms">null</field>
      <field name="_places">null</field>
      <field name="_result">null</field>
      <field name="_resultNode">null</field>
        
      <method name="_init">
        <body>
          this._places = Components.classes["@mozilla.org/browser/nav-history-service;1"]
                                   .getService(Components.interfaces.nsINavHistoryService);
          this._bms = Components.classes["@mozilla.org/browser/nav-bookmarks-service;1"]
                                .getService(Components.interfaces.nsINavBookmarksService);

          var queryString = this._getAttribute("root");
 
          if (queryString.substring(0,6)=="place:")
          {
            var queries = { }, options = { };
            this._places.queryStringToQueries(queryString, queries, { }, options);
            if (!queries.value.length) 
              queries.value = [this._places.getNewQuery()];
            this._result = this._places.executeQueries(queries.value, queries.value.length, options.value);
          }
          else
          {
            var query = this._places.getNewQuery();
            var options = this._places.getNewQueryOptions();
            var uri = Components.classes["@mozilla.org/network/simple-uri;1"]
                                .createInstance(Components.interfaces.nsIURI);
            uri.spec = queryString;
            query.uri=uri;
            options.expandQueries = true;
            this._result = this._places.executeQuery(query, options);
          }

          this._resultNode = this._result.root;
          
          if (!PlacesController.nodeIsFolder(this._resultNode))
          {
            this._resultNode.containerOpen = true;
            var node = this._resultNode.getChild(0);
            this._resultNode.containerOpen = false;
            this._resultNode = node;
          }
          
          this._rebuild();
        </body>
      </method>
      
      <method name="customise">
        <body>
        	this._configure("chrome://thinger/content/bookmark/options.xul");
        </body>
      </method>
      
      <method name="_rebuild">
        <body>
          while (this.firstChild)
            this.removeChild(this.firstChild);
          
          this._button.setAttribute("label", this._resultNode.title);
          this._settings.setAttribute("label", this._resultNode.title);
          if (this._resultNode.icon)
          {
            dump("Setting icon to "+this._resultNode.icon.spec+"\n");
            this._button.setAttribute("image", this._resultNode.icon.spec);
            this._settings.setAttribute("image", this._resultNode.icon.spec);
          }
          else
          {
            this._button.removeAttribute("image");
            this._settings.removeAttribute("image");
          }
          
          if (PlacesController.nodeIsURI(this._resultNode))
          {
            this._button.setAttribute("url", this._resultNode.uri);
            this._button.removeAttribute("type");
            this._button.removeAttribute("container");
            if (this._button.firstChild)
              this._button.removeChild(this._button.firstChild);
          }
          else if (PlacesController.nodeIsFolder(this._resultNode))
          {
            this._button.setAttribute("type", "menu");
            this._button.setAttribute("container", "true");
            var popup = this._button.firstChild;
            if (!this._button.firstChild)
            {
              popup = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "menupopup");
              popup.setAttribute("type", "places");
              popup.setAttribute("context", "placesContext");
	            popup.setAttribute("place", this._resultNode.uri);
              this._button.appendChild(popup);
            }
            else
            {
	            popup.setAttribute("place", this._resultNode.uri);
	          }
          }

          this._button.node = this._resultNode;
          this._service.persistThings();
        </body>
      </method>
      
      <method name="getResult">
        <body>
          return this._result;
        </body>
      </method>
 
      <property name="isBookmarks">
        <getter><![CDATA[ 
          return PlacesController.nodeIsFolder(this.getResult());
        ]]></getter>
      </property>
      
      <property name="hasSelection">
        <getter><![CDATA[ 
          return this._resultNode != null;
        ]]></getter>
      </property>
      
      <property name="hasSingleSelection">
        <getter><![CDATA[ 
          return this.hasSelection;
        ]]></getter>
      </property>
      
      <method name="getSelectionNodes">
        <body><![CDATA[
          return this.hasSelection ? [this.selectedNode] : [];
        ]]></body>
      </method>
      
      <method name="getRemovableSelectionRanges">
        <body><![CDATA[ 
          return [this.getSelectionNodes()];
        ]]></body>
      </method>
      
      <method name="getCopyableSelection">
        <body><![CDATA[
          return this.getSelectionNodes();
        ]]></body>
      </method>
      
      <method name="getDragableSelection">
        <body><![CDATA[
          if (PlacesController.nodeIsReadOnly(this._resultNode))
            return null;
          return this.getSelectionNodes();
        ]]></body>
      </method>
      
      <property name="selectedNode">
        <getter><![CDATA[ 
          return this.hasSelection ? this._resultNode : null;
        ]]></getter>
      </property>
      
      <property name="selectedURINode">
        <getter><![CDATA[
          var node = this.selectedNode;
          return node && PlacesController.nodeIsURI(node) ? node : null;
        ]]></getter>
      </property>
      
      <property name="browserWindow" onget="return window;"/>
      
      <property name="supportedDropTypes">
        <getter>
          if (PlacesController.nodeIsFolder(this._resultNode))
            return [TYPE_X_MOZ_PLACE_CONTAINER, TYPE_X_MOZ_PLACE_SEPARATOR, TYPE_X_MOZ_PLACE, TYPE_X_MOZ_URL];
          else
            return [];
        </getter>
      </property>

      <property name="supportedDropOnTypes">
        <getter>
          if (PlacesController.nodeIsFolder(this._resultNode))
            return [TYPE_X_MOZ_PLACE_CONTAINER, TYPE_X_MOZ_PLACE_SEPARATOR, TYPE_X_MOZ_PLACE, TYPE_X_MOZ_URL];
          else
            return [];
        </getter>
      </property>

      <!-- Checks whether and event should be acted on by this menu
           (It should be if the event affects one of this menu's child
            nodes) -->
      <method name="eventValid">
        <parameter name="event"/>
        <body><![CDATA[
          if (event.target != this)
            return false;
          return true;
        ]]></body>
      </method>
      
      <!-- Sets the active view to this view, and sets the selection 
           to the node from this event. -->
      <method name="setSelectionForEvent">
        <parameter name="event"/>
        <body><![CDATA[
          PlacesController.activeView = this;
          document.commandDispatcher.updateCommands(event.type);
        ]]></body>
      </method>

    </implementation>
    <handlers>
      <handler event="click">
        BookmarksEventHandler.onClick(event);
      </handler>
      <handler event="command">
        BookmarksEventHandler.onCommand(event);
      </handler>
      <handler event="popupshowing">
        BookmarksEventHandler.onPopupShowing(event);
      </handler>
      <handler event="mousedown"><![CDATA[
        if (this.eventValid(event))
          this.setSelectionForEvent(event);
      ]]></handler>
      <handler event="DOMMenuItemActive"><![CDATA[
        if (this.eventValid(event))
          this.setSelectionForEvent(event);
      ]]></handler>
    </handlers>
  </binding>

</bindings>
