<?xml version="1.0"?>

 <!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Firefox Toolbar Thinger.
   -
   - The Initial Developer of the Original Code is
   -     Dave Townsend <dave.townsend@blueprintit.co.uk>.
   - Portions created by the Initial Developer are Copyright (C) 2006
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK *****
   -
   - $HeadURL$
   - $LastChangedBy$
   - $Date$
   - $Revision$
   -->

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="thing" display="xul:toolbaritem">
    <content>
      <xul:toolbarbutton label="New thinger"/>
    </content>

    <implementation>
      
      <constructor>
        var service = Components.classes["@blueprintit.co.uk/thinger-service;1"]
                                .getService(Components.interfaces.mIThingerService);
        this._settings = service.getThingSettings(this);
        
        while (this.firstChild)
          this.removeChild(this.firstChild);
          
        if (this.parentNode.localName == "toolbar")
          this._init();
        else
          this._designinit();
      </constructor>
      
      <destructor>
        this._destroy();
      </destructor>
      
      <field name="_settings">null</field>
      <property name="settings" onget="return this._settings"/>
      
      <method name="_designinit">
        <body>
        </body>
      </method>
      
      <method name="_init">
        <body>
        </body>
      </method>
      
      <method name="_update">
        <body>
          this._destroy();
          if (this.parentNode.localName == "toolbar")
            this._init();
          else
            this._preinit();
        </body>
      </method>

      <method name="_destroy">
        <body>
        </body>
      </method>

    </implementation>
    
  </binding>
  
  <binding id="button-thing" extends="chrome://thinger/content/thing.xml#thing">
    <implementation>
      <field name="_button">document.getAnonymousNodes(this)[0]</field>
      
      <method name="_designinit">
        <body>
          if (this._settings.hasAttribute("label"))
            this._button.setAttribute("label", this._settings.getAttribute("label"));

          if (this._settings.hasAttribute("image"))
            this._button.setAttribute("image", this._settings.getAttribute("image"));
        </body>
      </method>
      
    </implementation>
  </binding>

      
  <binding id="script" extends="chrome://thinger/content/thing.xml#button-thing">
    <content>
      <xul:toolbarbutton label="New JavaScript Thinger"/>
    </content>
    
    <implementation>
      <field name="_script">null</field>
      
      <method name="_init">
        <body>
        <![CDATA[
          var text = "";
          var code = this._settings.getElementsByTagName("code");
          if (!code || !code[0])
            return;
          
          code=code[0];
          code.normalize();
          if (code.firstChild && code.firstChild.nodeType==Node.TEXT_NODE)
            this._script = new Function("event", "document", "window", code.firstChild.nodeValue);
        ]]>
        </body>
      </method>
      
      <method name="onCommand">
        <parameter name="event"/>
        <body>
          var doc = document;
          var win = window;
          if (false)
          {
            var browser = document.getElementById("content");
            doc = browser.contentDocument;
            win = browser.contentWindow;
          }
          
          if (this._script)
            this._script.call(this, event, doc, win);
        </body>
      </method>
    </implementation>

    <handlers>
      <handler event="command">
        this.onCommand(event);
      </handler>
      
      <handler event="click">
        if (event.button==1)
          this.onCommand(event);
      </handler>
    </handlers>

  </binding>

  <binding id="bookmark" extends="chrome://thinger/content/thing.xml#button-thing">
    <content>
      <xul:toolbarbutton label="New Bookmark Thinger" class="menuitem-iconic bookmark-item"/>
    </content>

    <implementation>
      <field name="_bms">null</field>
      <field name="_places">null</field>
      <field name="_result">null</field>
      <field name="_resultNode">null</field>
      
      <method name="_init">
        <body>
          this._places = Components.classes["@mozilla.org/browser/nav-history-service;1"]
                                   .getService(Components.interfaces.nsINavHistoryService);
          this._bms = Components.classes["@mozilla.org/browser/nav-bookmarks-service;1"]
                                .getService(Components.interfaces.nsINavBookmarksService);

          var query = this._places.getNewQuery();
          query.setFolders([this._bms.toolbarRoot], 1); 
          var options = this._places.getNewQueryOptions();
          options.setGroupingMode([Components.interfaces.nsINavHistoryQueryOptions.GROUP_BY_FOLDER], 1);
          options.expandQueries = true;
          this._result = this._places.executeQuery(query, options);
          this._resultNode = this._result.root;
          this._rebuild();
        </body>
      </method>
      
      <method name="_rebuild">
        <body>
          while (this.firstChild)
            this.removeChild(this.firstChild);
          
          this._button.setAttribute("label", this._resultNode.title);
          this._settings.setAttribute("label", this._resultNode.title);
          if (PlacesController.nodeIsURI(this._resultNode))
          {
            this._button.setAttribute("url", this._resultNode.uri);
            this._button.removeAttribute("type");
            this._button.removeAttribute("container");
            if (this._button.firstChild)
              this._button.removeChild(this._button.firstChild);
          }
          else if (PlacesController.nodeIsContainer(this._resultNode))
          {
            this._button.setAttribute("type", "menu");
            this._button.setAttribute("container", "true");
            var popup = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "menupopup");
            popup.setAttribute("type", "places");
            // This is set here and not in the XBL constructor for the menu because
            // it doesn't get initialized properly in the constructor.
            popup.setAttribute("context", "placesContext");
            this._button.appendChild(popup);
            popup._result = this._result;
            popup._resultNode = this._resultNode;
          }
          if (this._resultNode.icon)
          {
            this._button.setAttribute("image", this._resultNode.icon.spec);
            this._settings.setAttribute("image", this._resultNode.icon.spec);
          }
          this._button.node = this._resultNode;
        </body>
      </method>
      
    </implementation>
    
  </binding>
  
</bindings>
